generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma
enum UserRole {
  ADMIN
  SUPERADMIN
  USER
}
model User {
  id                    String                 @id @default(cuid())
  email                 String?                @unique
  emailVerified         DateTime?
  name                  String?
  image                  String?
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  role                  UserRole              @default(ADMIN)
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
}
// model User {
//   id                    String                   @id @default(uuid())
//   email                 String                   @unique
//     emailVerified         DateTime?
//   password              String?
//   name                  String                   // Add this line for the name field
//   role                  UserRole[] 
//   isTwoFactorEnabled    Boolean                @default(false)
//   auditLogs             AuditLog[]
//   workspaces            UserWorkspace[]
//   boards               BoardMember[]
//   accounts             Account[]
//   twoFactorConfirmation TwoFactorConfirmation?
// }


// model Organization {
//   id      Int      @id @default(autoincrement())
//   name    String
//   profileImage   String?  
  
// }
model Workspace {
  id      String @id @default(uuid())
  name    String
  profileImage   String?  
  members UserWorkspace[]
  boards  Board[]
}

model UserWorkspace {
  userId      String
  workspaceId String
  role        String
  accepted    Boolean
  workspace  Workspace @relation(fields: [workspaceId], references: [id])
  @@id([userId, workspaceId])
  @@unique([userId, workspaceId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Board {
    id      String @id @default(uuid())
  title   String
imageId       String
  imageThumbUrl String @db.Text
  imageFullUrl  String @db.Text
  imageUserName String @db.Text
  imageLinkHTML String @db.Text
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  members     BoardMember[]
  lists       List[]

  @@index([workspaceId])
}

model BoardMember {
    id    String @id @default(uuid())
  userId  String
  boardId String
  board Board @relation(fields: [boardId], references: [id])
  @@unique([userId, boardId])
}


model List {
  id      Int      @id @default(autoincrement())
  title   String
  order   Int

   boardId   String
  board     Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards   Card[]
 createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}


model Card {
  id          Int      @id @default(autoincrement())
  title       String
  order       Int
  description String?

  listId Int
  list   List @relation(fields: [listId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([listId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model AuditLog {
  id      String @id @default(uuid())
  userId      String
  workspaceId  String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
userImage   String @db.Text
  userName    String @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Prisma schema
model InvitedWorkspaces {
  id           String   @id @default(uuid())
  superAdminId String
  workspaceId  String
}

model InvitedBoards {
  id      String @id @default(uuid())
  userId  String
  boardId String
}

model Company {
  id   String  @id @default(uuid())
  name String
  email String
}

model InvitedUsers {
  id         String  @id @default(uuid())
  companyId  String
  email      String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  token   String   @unique
  expires DateTime
  email   String
  id      String   @id @default(cuid())

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

