generator client {
    provider = "prisma-client-js"
  }
  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }

  
model User {
  id                    String                 @id @default(cuid())
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  name                  String?
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  role                  UserRole               @default(USER)
  orgname               String?                // Added orgname field
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  token   String   @unique
  expires DateTime
  email   String
  id      String   @id @default(cuid())

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}
model Board {
  id            String @id @default(uuid())
  orgId         String
  title         String
  imageId       String
  imageThumbUrl String @db.Text
  imageFullUrl  String @db.Text
  imageUserName String @db.Text
  imageLinkHTML String @db.Text

  lists         List[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model List {
  id        String @id @default(uuid())
  title     String
  order     Int

  boardId   String
  board     Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards     Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id          String    @id @default(uuid()) 
  title       String
  order       Int
  description String?  @db.Text

  listId      String
  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  checklist   ChecklistItem[]
  @@index([listId])
}

model ChecklistItem {
  id      String   @id @default(uuid())
  cardId  String
  checked Boolean
  card    Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model AuditLog {
  id          String  @id @default(uuid())
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String @db.Text
  userName    String @db.Text

  createdAt   DateTime @default(now())
  updatedAt   DateTime  @updatedAt
}

model Organization {
  id      Int      @id @default(autoincrement())
  name    String
  profileImage   String?  
  
}


