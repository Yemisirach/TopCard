generator client {
    provider = "prisma-client-js"
  }
  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  userSettings          UserSettings[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  orgId  String?   // Add this line for organizationId
  organizations UserOrganization[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum UserRole {
  ADMIN
  SUPERADMIN
  USER
}
model Board {
  id            String @id @default(uuid())
  orgId         String
  title         String
  imageId       String
  imageThumbUrl String @db.Text
  imageFullUrl  String @db.Text
  imageUserName String @db.Text
  imageLinkHTML String @db.Text
  lists         List[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model List {
  id        String @id @default(uuid())
  title     String
  order     Int
  boardId   String
  board     Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([boardId])
}

model Card {
  id          String    @id @default(uuid()) 
  title       String
  order       Int
  description String?  @db.Text

  listId      String
  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  checklist   ChecklistItem[]
  @@index([listId])
}

model ChecklistItem {
  id      String   @id @default(uuid())
  cardId  String
  checked Boolean
  card    Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
  ORGANIZATION
}

model AuditLog {
  id          String  @id @default(uuid())
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String @db.Text
  userName    String @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime  @updatedAt
}

model Organization {
  id       String   @id @default(uuid())
  name    String
  userId         String
  imageId       String
  imageThumbUrl String @db.Text
  imageFullUrl  String @db.Text
  imageUserName String @db.Text
  imageLinkHTML String @db.Text
  members UserOrganization[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


model UserSettings {
  id      String @id @default(cuid())
  userId  String  @db.Text
  orgId   String?
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([orgId])
}
model UserOrganization {
  id         String  @id @default(cuid())
  userId     String
  orgId      String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  @@unique([userId, orgId])
}
